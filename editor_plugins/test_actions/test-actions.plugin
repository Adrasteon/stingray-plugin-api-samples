// About
//
name = "Test Action Extensions"
description = "Test actions extensions."
version = "0.2.0"

// Extensions
//
extensions = {
    actions = [
        {
            name = "test-compile-data"
            type = "js"
            script = """
                require(['services/engine-service'], function (engineService) {
                    engineService.enqueueDataCompile().then(console.warn.bind(console, 'Compilation requested.'));
                }.bind(this));
            """
        }
    ]

    contextual_actions = [
        {
            type = "asset"
            label = "Open In Sublime"

            when = {
                extension = "*"
            }

            do = [
                {
                    type = "process"
                    path = "\"C:\\Program Files\\Sublime Text 3\\sublime_text.exe\" \"$project\\$1\""
                }
            ]
        }

        {
            label = "Checkout"
            type = "asset"

            when = {
                extension = "*"
                predicate = {
                    type = "js"
                    module = "module-actions"
                    function_name = "isReadOnly"
                }
            }

            do = [
                {
                    type = "js"
                    module = "module-actions"
                    function_name = "checkout"
                }
            ]
        }

        {
            name = "open-in-paint"
            label = "Open in Paint"
            type = "asset"

            when = {
                extension = [
                    "png"
                    "jpg"
                ]
            }

            do = [
                {
                    type = "process"
                    path = "\"C:\\Program Files\\paint.net\\PaintDotNet.exe\" \"$project\\$1\""
                }
            ]
        }

        {
            type = "level_object"
            label = "Duplicate"

            when = {
                category = "*"
            }

            when_multi_select = {
                type = "js"
                script = "true"
            }

            do = [
                {
                    type = "js"
                    module = "module-actions"
                    function_name = "duplicateLevelObjects"
                }
            ]
        }
    ]

    menus = [
        {
            path = "Developer/Tests/Compile"
            action = "test-compile-data"
        }

        {
            path = "Developer/Print Message"
            action = {
                type = "js"
                script = "console.log('[NOTICE] Hello version 8');"
            }
        }

        {
            path = "Developer/Tests/Spawn terrain"
            action = {
                type = "lua"
                script = """
                    print("Spawning terrain")
                    local level_editor_viewport_window = ({next(Editor:all_level_editing_viewports())})[2]
                    print("Level viewport", level_editor_viewport_window)
                    if level_editor_viewport_window then
                        local terrain_make_result = Terrain.make(stingray.Vector3(0,0,0), stingray.Quaternion.identity(),
                            1, {x = 1024, y = 1024, z = 64}, level_editor_viewport_window)
                        print("Terrain spawned", terrain_make_result)
                    end
                """
            }
        }

        { path = "Developer/Invalid Actions" }

        {
            path = "Developer/Invalid Actions/no function_name defined"
            action = {
                type = "js"
                module = "module-actions"
            }
        }

        {
            path = "Developer/Invalid Actions/module not resolvable"
            action = {
                type = "js"
                module = "invalid_ref"
            }
        }
    ]

    templates = [{
         type = "asset"
         name = "Print template creation args"
         default_name = "test"
         create = [{
             type = "js"
             script = """
                console.warn('Template creation script arguments \r\n' + [
                    'editor', '$editor', '\r\n',
                    'project', '$project', '\r\n',
                    'name', '$name', '\r\n',
                    'output_dir', '$output_dir', '\r\n',
                    'type', '$type', '\r\n',
                    'first arg', '$1', '\r\n',
                    'second arg', '$2']
                    .concat(Array.prototype.slice(arguments, 0))
                    .join(' '));
             """
         }]
    }, {
        type = "asset"
        name = "Create a test ini asset"
        default_name = "test"
        create = [{
            type = "js"
            module = "module-actions" // name of the javascript file without .js
            function_name = "createIniAsset"
        }]
    }]

    // Migration extensions allow a plugin developer to define actions that gets triggered
    // to migration a project.
    //
    // When loading a project the system gets all the migration extensions and checks if any
    // of them needs to be ran. If a project version is lower or equals to the migration version,
    // then
    migrations = [
        {
            // Patch unique id
            // This patch id gets stored in the project settings.
            // If the project settings already include the patch id, then the migration is skipped.
            id = "test-1"

            // Minimum version to check for migration.
            // If the this number is higher or equals to the project version, then run this migration patch.
            version = "0.0.9"

            // Execute this set of actions if the migration needs to run.
            do = [
                {
                    type = "js"
                    module = "module-actions"
                    function_name = "test"
                }
            ]
        }

//        {
//            // Patch unique id
//            // This patch id gets stored in the project settings.
//            // If the project settings already include the patch id, then the migration is skipped.
//            id = "patch-should-fail"
//
//            // Minimum version to check for migration.
//            version = "0.0.9.1"
//
//            // Execute this set of actions if the migration needs to run.
//            do = [
//                {
//                    type = "js"
//                    module = "module-actions"
//                    function_name = "fail"
//                }
//            ]
//        }

        {
            // Patch unique id
            // This patch id gets stored in the project settings.
            // If the project settings already include the patch id, then the migration is skipped.
            id = "test-2"

            // Minimum version to check for migration.
            // If the this number is higher or equals to the project version, then run this migration patch.
            version = "0.1.0"

            // Execute this set of actions if the migration needs to run.
            do = [
                {
                    type = "js"
                    script = "console.warn('Migrating $1 data...')"
                }

                {
                    type = "js"
                    module = "module-actions"
                    function_name = "patchLuaFiles"
                }
            ]
        }
    ]
}
